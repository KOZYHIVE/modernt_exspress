// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  username           String         @unique
  email              String         @unique
  password           String
  secure_url_profile String?
  public_url_profile String?
  role               Role           @default(user)
  status             UserStatus     @default(active)
  otp                Int?
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  address_delivery AddressDelivery[]
  logs               Log[]
  refresh_token      RefreshToken[]
  banner             Banner[]
  rental             Rental[]
  transaction        Transaction[]
  bank_transfer BankTransfer[]
}

enum Role {
  user
  admin
}

enum UserStatus {
  active
  pending
  suspend
}

model AddressDelivery {
  id         Int      @id @default(autoincrement())
  user_id    Int
  full_name  String
  address    String
  phone      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user        User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  Rental Rental[]
}

model Log {
  id          Int    @id @default(autoincrement())
  user_id     Int
  action      Action
  description String
  created_at  BigInt
  user        User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum Action {
  login
  logout
  add_car
  update_car
  delete_car
  booking_car
  confirm_payment
  canceled_booking
}

model RefreshToken {
  id            Int      @id @default(autoincrement())
  user_id       Int
  refresh_token String?  @db.VarChar(1024)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Vehicle {
  id                     Int                    @id @default(autoincrement())
  brand_id               Int
  vehicle_type           VehicleType
  vehicle_name           String
  rental_price           Int
  availability_status    AvailabilityStatus     @default(available)
  year                   DateTime
  seats                  Int
  horse_power            Int
  description            String
  specification_list     String
  secure_url_image String?
  public_url_image String?
  created_at             DateTime               @default(now())
  updated_at             DateTime               @updatedAt
  brand                  Brand                  @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  rental Rental[]
}

enum VehicleType {
  motorcycle
  car
}

enum AvailabilityStatus {
  available
  rented
  inactive
}

model Brand {
  id               Int       @id @default(autoincrement())
  brand_name       String
  secure_url_image String?
  public_url_image String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  vehicles         Vehicle[]
}

model Rental {
  id                  Int              @id @default(autoincrement())
  vehicle_id          Int
  user_id             Int
  start_date          DateTime
  end_date            DateTime
  delivery_location_id Int
  rental_status       RentalStatus
  total_price         Int
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  delivery_location AddressDelivery @relation(fields: [delivery_location_id], references: [id], onDelete: Cascade)
  vehicle Vehicle @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  transaction Transaction[]
  user                User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum RentalStatus {
  pending
  confirmed
  canceled
}

model Transaction {
  id               Int        @id @default(autoincrement())
  user_id          Int
  rental_id        Int
  payment_status   PaymentStatus
  transaction_date DateTime
  payment_method   PaymentMethod
  total_amount     Int
  secure_url_image String?
  public_url_image String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  user             User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  rental           Rental        @relation(fields: [rental_id], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  paid
  unpaid
  pending
}

enum PaymentMethod {
  bank_transfer
  cash
}

model Banner {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  description        String
  secure_url_image String?
  public_url_image String?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Token {
  id        Int    @id @default(autoincrement())
  token     String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankTransfer {
  id Int @id @default(autoincrement())
  user_id Int
  name_bank String
  number String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}