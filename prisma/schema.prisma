generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Sesuaikan dengan database Anda
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  username             String        @unique
  full_name           String?
  email                String        @unique
  password             String
  phone                String?
  secure_url_profile   String?
  public_url_profile   String?
  role                 Role          @default(user)
  status               Status        @default(active)
  otp                  String?
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  Address              Address[]
  logs                 Logs[]
  RefreshToken         RefreshToken[]
  Booking              Booking[]
  Banner               Banner[]
  BankTransfer         BankTransfer[]
}

enum Role {
  user
  admin
}

enum Status {
  active
  pending
  suspend
}

model Address {
  id             Int      @id @default(autoincrement())
  user_id        Int
  full_name      String
  address        String?
  phone          String?
  full_address   String?
  latitude       String?
  longitude      String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  booking        Booking[]
}

model Logs {
  id          Int      @id @default(autoincrement())
  user_id     Int
  action      Action
  description String
  created_at  BigInt
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id            Int      @id @default(autoincrement())
  user_id       Int
  refresh_token String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Booking {
  id                Int          @id @default(autoincrement())
  user_id           Int
  vehicle_id        Int
  rental_period     Int
  start_date        DateTime
  end_date          DateTime
  delivery_location Int
  rental_status     RentalStatus @default(pending)
  total_price       Int
  secure_url_image  String?
  public_url_image  String?
  payment_proof   PaymentStatus @default(unpaid)
  bank_transfer     Int
  notes             String?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  user              User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  vehicle           Vehicle       @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  delivery          Address       @relation(fields: [delivery_location], references: [id], onDelete: Cascade)
  bank              BankTransfer @relation(fields: [bank_transfer], references: [id], onDelete: Cascade)
}

model Vehicle {
  id                Int           @id @default(autoincrement())
  brand_id          Int
  vehicle_type      VehicleType
  vehicle_name      String
  rental_price      Int
  availability_status Availability @default(available)
  year              DateTime
  seats             Int
  horse_power       Int
  description       String
  specification_list String
  secure_url_image  String?
  public_url_image  String?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  brand             Brand         @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  Booking           Booking[]
  Banner            Banner[]
}

model Brand {
  id               Int      @id @default(autoincrement())
  brand_name       String
  public_url_image String?
  secure_url_image String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  Vehicle          Vehicle[]
}

model Banner {
  id                Int      @id @default(autoincrement())
  user_id           Int
  vehicle_id        Int
  title             String
  description       String
  secure_url_image  String?
  public_url_image  String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  vehicle           Vehicle  @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
}

enum Action {
  login
  logout
  add_car
  update_car
  delete_car
  booking_car
  confirm_payment
  canceled_booking
}

enum RentalStatus {
  active
  cancelled
  pending
}

enum PaymentStatus {
  paid
  unpaid
  pending
}

enum VehicleType {
  motorcycle
  car
}

enum Availability {
  available
  rented
  inactive
}

model BankTransfer {
  id Int @id @default(autoincrement())
  user_id Int
  name_bank String
  number String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  booking Booking[]
}